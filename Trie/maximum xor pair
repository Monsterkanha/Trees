we build prefix tree of bit manipulation
we will try to find the best match

suppose 
number is 25.

11001
so for first position we would need 0 so we will go to complement. So, we will go to 0 child and if that is not present then forcefully we will go 
to first child only.


class Solution {
public:
    class TreeNode{
        public:
        int end;
        TreeNode* child[2];
        TreeNode(){
            end = 0;
            child[0] = NULL;
            child[1] = NULL;
        }    
    };
    
    TreeNode* build(vector<int>& nums){
        TreeNode* root = new TreeNode();
        TreeNode* curr;
        
        for(auto x: nums){
            curr = root;
            for(int i = 31; i >= 0; i--){
                int val = (x >> i)& 1;
                if(!curr->child[val]){
                    curr->child[val] = new TreeNode();
                }   
                curr = curr->child[val];
            }
        }
        curr->end = 1;
        return root;
    }
    
    int helper(int num,TreeNode* root){
        int res = 0;
        for(int i = 31; i>= 0; i--){
            int ind = ((num >> i) & 1)?0:1;
            if(!root->child[ind]){
                root = root->child[1-ind];
            }
            else{            // Different value we have got so xor will be 1.
                res |= (1 << i);        // Calculating xor simulatanously.
                root = root->child[ind];
            }
        }
        return res;
    }
    
    
    int findMaximumXOR(vector<int>& nums ) {
        int res = 0;
        TreeNode* root = build(nums);
        for(auto x: nums){
            res = max(res, helper(x, root));
        }
        return res;
    }
};
