Here, We know that first entry of preorder is root. and we can find its position in inorder 
Also we know that element left to it will part of left and element right to it part of right subtree.
But, how do you know what will be root of right side element.

That simple, we know how many elements will go to its left then remaining will go to its right. 
so will just do (left elements = ind - is + root + 1) ->next element.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        unordered_map<int,int> M;
        for(int i= 0; i < n; i++)   M[inorder[i]] = i;
        
        
        function<TreeNode*(int , int , int)> solve = [&](int root, int is, int ie){
            if(is > ie || root == n) return (TreeNode*)NULL;
            
            TreeNode* curr = new TreeNode(preorder[root]);
            int ind = M[preorder[root]];
         
            curr->left = solve(root + 1, is, ind - 1);
            curr->right = solve(root + 1 + ind - is, ind + 1, ie);
            
            return curr;
        };
        
        return solve(0, 0, n-1);
    }
};
