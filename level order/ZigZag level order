Here, Use of queue and a bool variable which will true false alternatively,

1.
vector<vector<int> > Solution::zigzagLevelOrder(TreeNode* A) {
    if(!A) return {};
    vector<vector<int>> ans;
    queue<TreeNode*> q;
    q.push(A);
    int flag = 0;
    while(!q.empty()){
        vector<int> vec;
        int n = q.size();
        for(int i = 0;i < n; i++){
            TreeNode* curr = q.front();
            vec.push_back(curr->val);
            q.pop();
            if(curr->left)
                q.push(curr->left);
            if(curr->right)
                q.push(curr->right);
            
        }
        if(flag == 1){
            reverse(vec.begin(), vec.end());
            flag = 0;
        }
        else flag = 1;
        ans.push_back(vec);
    }
    return ans;
}


2. Using 2 stack or one deque .

zig zag pattern. 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<vector<int> > Solution::zigzagLevelOrder(TreeNode* A) {
    if(!A) return {};
    vector<vector<int>> ans;
    deque<TreeNode*> dq;
    dq.push_back(A);
    int flag = 0;
    while(!dq.empty()){
        vector<int> vec;
        int n = dq.size();
        if(flag == 0){
            for(int i = 0 ;i  < n; i++){
                TreeNode* curr = dq.front();
                dq.pop_front();
                vec.push_back(curr->val);
                if(curr->left) dq.push_back(curr->left);
                if(curr->right)  dq.push_back(curr->right);
                
            }
        }
        else{
            for(int i = 0 ; i  < n; i++){
                TreeNode* curr = dq.back();
                dq.pop_back();
                vec.push_back(curr->val);
                if(curr->right)  dq.push_front(curr->right);
                if(curr->left) dq.push_front(curr->left);
                
            }
        }
        flag = 1 - flag;
        ans.push_back(vec);
    }
    return ans;
}

